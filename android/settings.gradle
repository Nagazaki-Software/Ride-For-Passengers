pluginManagement {
    def flutterSdkPath = {
        // Resolve Flutter SDK path from multiple sources with validation.
        def properties = new Properties()
        def localProps = file("local.properties")
        if (localProps.exists()) {
            localProps.withInputStream { properties.load(it) }
        }

        // Priority: -Pflutter.sdk > local.properties > env (FLUTTER_HOME/FLUTTER_ROOT)
        def resolved = gradle.startParameter.projectProperties.get("flutter.sdk")
        if (resolved == null) {
            resolved = properties.getProperty("flutter.sdk")
        }
        if (resolved == null) {
            resolved = System.getenv("FLUTTER_HOME") ?: System.getenv("FLUTTER_ROOT")
        }

        // Validate the candidate path contains expected Flutter structure
        def isValidFlutter = { String p ->
            if (p == null) return false
            def base = new File(p)
            return new File(base, "bin/flutter").exists() && new File(base, "packages/flutter_tools/gradle").exists()
        }

        if (!isValidFlutter(resolved)) {
            throw new GradleException("Flutter SDK not found. Set -Pflutter.sdk, flutter.sdk in local.properties, or FLUTTER_HOME/FLUTTER_ROOT.")
        }

        return resolved
    }()

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0"
    id "com.android.application" version "8.7.3" apply false
    id "org.jetbrains.kotlin.android" version "2.1.0" apply false
    id "com.google.gms.google-services" version "4.3.8" apply false  // Google Services plugin
    
}

include ":app"
