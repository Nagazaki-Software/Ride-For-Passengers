  // "faster" field.
  bool? _faster;
  bool get faster => _faster ?? false;
  bool hasFaster() => _faster != null;

  // "sos" field.
  bool? _sos;
  bool get sos => _sos ?? false;
  bool hasSos() => _sos != null;

  // "passangers" field.
  String? _passangers;
  String get passangers => _passangers ?? '';
  bool hasPassangers() => _passangers != null;

  // "id" field.
  String? _id;
  String get id => _id ?? '';
  bool hasId() => _id != null;

  // "transactionId" field.
  String? _transactionId;
  String get transactionId => _transactionId ?? '';
  bool hasTransactionId() => _transactionId != null;

  void _initializeFields() {
    _user = snapshotData['user'] as DocumentReference?;
    _latlng = snapshotData['latlng'] as LatLng?;
    _dia = snapshotData['dia'] as DateTime?;
    _option = snapshotData['option'] as String?;
    _latlngAtual = snapshotData['latlngAtual'] as LatLng?;
    _driver = snapshotData['driver'] as DocumentReference?;
    _userPlataform = snapshotData['userPlataform'] as String?;
    _salvarSomente = snapshotData['salvarSomente'] as bool?;
    _notas = snapshotData['notas'] as String?;
    _repeat = snapshotData['repeat'] as String?;
    _nomeOrigem = snapshotData['nomeOrigem'] as String?;
    _nomeDestino = snapshotData['nomeDestino'] as String?;
    _paid = snapshotData['paid'] as bool?;
    _rideShare = snapshotData['rideShare'] as bool?;
    _participantes = getDataList(snapshotData['participantes']);
    _rideValue = castToType<double>(snapshotData['rideValue']);
    _status = snapshotData['status'] as String?;
    _whyCanceled = snapshotData['whyCanceled'] as String?;
    _faster = snapshotData['faster'] as bool?;
    _sos = snapshotData['sos'] as bool?;
    _passangers = snapshotData['passangers'] as String?;
    _id = snapshotData['id'] as String?;
    _transactionId = snapshotData['transactionId'] as String?;
  }

  static CollectionReference get collection =>
      FirebaseFirestore.instance.collection('rideOrders');

  static Stream<RideOrdersRecord> getDocument(DocumentReference ref) =>
      ref.snapshots().map((s) => RideOrdersRecord.fromSnapshot(s));

  static Future<RideOrdersRecord> getDocumentOnce(DocumentReference ref) =>
      ref.get().then((s) => RideOrdersRecord.fromSnapshot(s));

  static RideOrdersRecord fromSnapshot(DocumentSnapshot snapshot) =>
      RideOrdersRecord._(
        snapshot.reference,
        mapFromFirestore(snapshot.data() as Map<String, dynamic>),
      );

  static RideOrdersRecord getDocumentFromData(
    Map<String, dynamic> data,
    DocumentReference reference,
  ) =>
      RideOrdersRecord._(reference, mapFromFirestore(data));

  @override
  String toString() =>
      'RideOrdersRecord(reference: ${reference.path}, data: $snapshotData)';

  @override
  int get hashCode => reference.path.hashCode;

  @override
  bool operator ==(other) =>
      other is RideOrdersRecord &&
      reference.path.hashCode == other.reference.path.hashCode;
}

Map<String, dynamic> createRideOrdersRecordData({
  DocumentReference? user,
  LatLng? latlng,
  DateTime? dia,
  String? option,
  LatLng? latlngAtual,
  DocumentReference? driver,
  String? userPlataform,
  bool? salvarSomente,
  String? notas,
  String? repeat,
  String? nomeOrigem,
  String? nomeDestino,
  bool? paid,
  bool? rideShare,
  double? rideValue,
  String? status,
  String? whyCanceled,
  bool? faster,
  bool? sos,
  String? passangers,
  String? id,
  String? transactionId,
}) {
  final firestoreData = mapToFirestore(
    <String, dynamic>{
      'user': user,
      'latlng': latlng,
      'dia': dia,
      'option': option,
      'latlngAtual': latlngAtual,
      'driver': driver,
      'userPlataform': userPlataform,
      'salvarSomente': salvarSomente,
      'notas': notas,
      'repeat': repeat,
      'nomeOrigem': nomeOrigem,
      'nomeDestino': nomeDestino,
      'paid': paid,
      'rideShare': rideShare,
      'rideValue': rideValue,
      'status': status,
      'whyCanceled': whyCanceled,
      'faster': faster,
      'sos': sos,
      'passangers': passangers,
      'id': id,
      'transactionId': transactionId,
    }.withoutNulls,
  );

  return firestoreData;
}

class RideOrdersRecordDocumentEquality implements Equality<RideOrdersRecord> {
  const RideOrdersRecordDocumentEquality();

  @override
  bool equals(RideOrdersRecord? e1, RideOrdersRecord? e2) {
    const listEquality = ListEquality();
    return e1?.user == e2?.user &&
        e1?.latlng == e2?.latlng &&
        e1?.dia == e2?.dia &&
        e1?.option == e2?.option &&
        e1?.latlngAtual == e2?.latlngAtual &&
        e1?.driver == e2?.driver &&
        e1?.userPlataform == e2?.userPlataform &&
        e1?.salvarSomente == e2?.salvarSomente &&
        e1?.notas == e2?.notas &&
        e1?.repeat == e2?.repeat &&
        e1?.nomeOrigem == e2?.nomeOrigem &&
        e1?.nomeDestino == e2?.nomeDestino &&
        e1?.paid == e2?.paid &&
        e1?.rideShare == e2?.rideShare &&
        listEquality.equals(e1?.participantes, e2?.participantes) &&
        e1?.rideValue == e2?.rideValue &&
        e1?.status == e2?.status &&
        e1?.whyCanceled == e2?.whyCanceled &&
        e1?.faster == e2?.faster &&
        e1?.sos == e2?.sos &&
        e1?.passangers == e2?.passangers &&
        e1?.id == e2?.id &&
        e1?.transactionId == e2?.transactionId;
  }

  @override
  int hash(RideOrdersRecord? e) => const ListEquality().hash([
        e?.user,
        e?.latlng,
        e?.dia,
        e?.option,
        e?.latlngAtual,
        e?.driver,
        e?.userPlataform,
        e?.salvarSomente,
        e?.notas,
        e?.repeat,
        e?.nomeOrigem,
        e?.nomeDestino,
        e?.paid,
        e?.rideShare,
        e?.participantes,
        e?.rideValue,
        e?.status,
        e?.whyCanceled,
        e?.faster,
        e?.sos,
        e?.passangers,
        e?.id,
        e?.transactionId
      ]);

  @override
  bool isValidKey(Object? o) => o is RideOrdersRecord;
}
